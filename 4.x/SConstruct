#!/usr/bin/env python
import os
import sys

env = SConscript("godot-cpp/SConstruct")
openmpt_library = SConscript("../SCsub", exports="env")

opts = Variables([], ARGUMENTS)
opts.Add("target_name", "Name of the library to be built by SCons", "libgdmpt")
opts.Update(env)

if env["target"] == "template_release":
    if env.get("is_msvc", False):
        env.Append(LINKFLAGS=["/LTCG"])
    else:
        env.Append(LINKFLAGS=["-flto"])

env.Append(LIBS=[openmpt_library])
if env.get("is_msvc", False):
    env.Append(LIBS=["Shlwapi"])  # Used by mpg123

env.Append(CPPPATH=["src/", "../openmpt"])
sources = Glob("src/*.cpp")

if env["platform"] == "macos":
    library = env.SharedLibrary(
        "project/bin/{}.{}.{}.framework/{}.{}.{}".format(
            env["target_name"],
            env["platform"],
            env["target"],
            env["target_name"],
            env["platform"],
            env["target"],
        ),
        source=sources,
    )
elif env["platform"] == "ios":
    if env["ios_simulator"]:
        library = env.StaticLibrary(
            "project/bin/{}.{}.{}.simulator.a".format(
                env["target_name"], env["platform"], env["target"]
            ),
            source=sources,
        )
    else:
        library = env.StaticLibrary(
            "project/bin/{}.{}.{}.a".format(
                env["target_name"], env["platform"], env["target"]
            ),
            source=sources,
        )
else:
    library = env.SharedLibrary(
        "project/bin/{}{}{}".format(
            env["target_name"], env["suffix"], env["SHLIBSUFFIX"]
        ),
        source=sources,
    )

Default(library)
